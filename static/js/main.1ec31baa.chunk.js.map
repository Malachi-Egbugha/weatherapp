{"version":3,"sources":["components/Titles.js","components/Form.js","components/weather.jsx","App.js","serviceWorker.js","index.js"],"names":["Titles","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","pressure","description","humidity","error","api_key","App","state","undefined","e","a","preventDefault","target","elements","value","fetch","api_call","json","data","setState","main","temp","sys","weather","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1ec31baa.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Titles= ()=>\r\n(\r\n            <div>\r\n                <h1 className=\"heading\">Weather Finder</h1>\r\n                <p className=\"lead\">Find Out Temperature, conditions and more</p>\r\n            </div>\r\n);\r\n\r\nexport default Titles;","import React from 'react';\r\n\r\n\r\nconst Form = (props) => (\r\n        \r\n        <form onSubmit={props.getWeather}>\r\n             <div className=\"form-group row\">\r\n             <div className=\"col-md-3\"></div>\r\n            <div className=\"col-md-6\">\r\n            <input type=\"text\" className=\"form-control\" name=\"city\" placeholder=\"City\"/>\r\n            </div>\r\n            <div className=\"col-md-3\"></div>\r\n            </div>\r\n            <div className=\"form-group row\">\r\n            <div className=\"col-md-3\"></div>\r\n            <div className=\"col-md-6\">\r\n            <input type=\"text\" className=\"form-control\" name=\"country\" placeholder=\"Country\"/>\r\n            </div>\r\n            <div className=\"col-md-3\"></div>\r\n            </div>\r\n            <div className=\"form-group row\">\r\n            <div className=\"col-md-3\"></div>\r\n            <div className=\"col-md-6\">\r\n            <button className=\"btn btn-primary btnstyle\">GET WEATHER</button>\r\n            </div>\r\n            <div className=\"col-md-3\"></div>\r\n            </div>\r\n        </form>\r\n        \r\n            \r\n        \r\n        );\r\n    \r\n\r\nexport default Form;","import React from 'react';\r\n\r\n\r\nconst Weather= (props) => (\r\n    \r\n       <div className=\"row weather\">\r\n               <div className=\"col-md-3\"></div>\r\n               <div className=\"col-md-6\">{props.city && props.country && <p className=\"lead\"><span className=\"weatherlocation\"> {props.city}, {props.country}</span></p>}</div>\r\n               <div className=\"col-md-3\"></div>\r\n               <div className=\"col-md-3\"></div>\r\n               <div className=\"col-md-6\"> {props.temperature && <p className=\"lead\"><span className=\"weathertemp\"> {props.temperature} <sup>o</sup>C</span></p>}</div>\r\n               <div className=\"col-md-3\"></div>\r\n               <div className=\"col-md-3\"></div>\r\n               <div className=\"col-md-6\">{props.pressure && <p className=\"lead\"><span className=\"weatherhead\">Pressure: {props.pressure}</span></p>}</div>\r\n               <div className=\"col-md-3\"></div>\r\n               <div className=\"col-md-3\"></div>\r\n               <div className=\"col-md-6\">{props.description && <p className=\"lead\"><span className=\"weatherhead\">Conditions: {props.description}</span></p>}</div>\r\n               <div className=\"col-md-3\"></div>\r\n               <div className=\"col-md-3\"></div>\r\n               <div className=\"col-md-6\">{props.humidity && <p className=\"lead\"><span className=\"weatherhumidity\">Humidity: {props.humidity}</span></p>}</div>\r\n               <div className=\"col-md-3\"></div>\r\n               <div className=\"col-md-3\"></div>\r\n               <div className=\"col-md-6\">{props.error && <p className=\"lead\">{props.error}</p>}</div>\r\n               <div className=\"col-md-3\"></div>\r\n            </div>\r\n    );\r\n\r\n\r\n\r\nexport default Weather;","import React,{Component} from 'react';\nimport './App.css';\nimport Titles from \"./components/Titles\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/weather\";\n\nconst api_key=\"6f69111ddfc454f0d4a64903e6e1eb25\";\n\nclass App extends Component {\n  \n    state= {\n        temperature:undefined,\n        city:undefined,\n        country:undefined,\n        pressure:undefined,\n        humidity:undefined,\n        description:undefined,\n        error:undefined\n      \n    };\n  \n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value; \n    const country = e.target.elements.country.value;\n    const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${api_key}&units=metric`);\n    const data = await api_call.json();\n    if(city && country)\n    {\n      this.setState({\n        humidity: data.main.humidity,\n        pressure:data.main.pressure,\n        temperature:data.main.temp,\n        city:data.name,\n        country:data.sys.country,\n        description:data.weather[0].description,\n        error:\"\"\n            });\n\n    }\n    else{\n      this.setState({\n        humidity: undefined,\n        pressure:undefined,\n        temperature:undefined,\n        city:undefined,\n        country:undefined,\n        description:undefined,\n        error:\"Please Enter Your Values\"\n            });\n    }\n\n\n  }\n  render()\n  {\n    return (\n    <div className=\"App\">\n      <div className=\"container\">\n      <Titles/>\n      <Form getWeather={this.getWeather}/>       \n       <Weather\n        temperature={this.state.temperature}\n        pressure={this.state.pressure}\n        humidity={this.state.humidity}\n        city={this.state.city}\n        country={this.state.country}\n        description={this.state.description}\n        error={this.state.error}\n       />\n      </div>\n      \n    \n    </div>\n  );\n\n  }\n  \n}\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}